% GSA code v1.1.
% Generated by Esmat Rashedi, 2010.
% "	E. Rashedi, H. Nezamabadi-pour and S. Saryazdi,
% �GSA: A Gravitational Search Algorithm�, Information sciences, vol. 179,
% no. 13, pp. 2232-2248, 2009."

% Gravitational Search Algorithm.
function [GlobalBest_Cost,GlobalBest_Position,BestCosts,Store]=GSA(nPop,Max_iter,VarMin,VarMax,nVar,CostFunction,ElitistCheck,min_flag,Rpower);
        
%V:   Velocity.
%a:   Acceleration.
%M:   Mass.  Ma=Mp=Mi=M;
%dim: Dimension of the test function.
%N:   Number of agents.
%X:   Position of agents. dim-by-N matrix.
%R:   Distance between agents in search space.
%[low-up]: Allowable range for search space.
%Rnorm:  Norm in eq.8.
%Rpower: Power of R in eq.7.

Rnorm=2;

if size(VarMin,2) == 1
VarMin = repmat(VarMin,1,nVar);
VarMax = repmat(VarMax,1,nVar);
end

%random initialization for agents.
X=initialization(nVar,nPop,VarMax,VarMin);

%create the best so far chart and average fitnesses chart.
BestChart=[];MeanChart=[];

V=zeros(nPop,nVar);

BestCosts=zeros(Max_iter,1);
fitness = zeros(nPop,1);
% Store
empty.GlobalBest_Position = [];
empty.GlobalBest_Cost = [];
Store = repmat(empty,Max_iter,1);
for iter=1:Max_iter
    %     iteration
    
    %Checking allowable range.
    X=space_bound(X,VarMax,VarMin);
    
    %Evaluation of agents.
    for i = 1:nPop
        fitness(i,1)=CostFunction(X(i,:));
    end
    if min_flag==1
        [best, best_X]=min(fitness); %minimization.
    else
        [best, best_X]=max(fitness); %maximization.
    end
    
    if iter==1
        Fbest=best;Lbest=X(best_X,:);
    end
    if min_flag==1
        if best<Fbest  %minimization.
            Fbest=best;Lbest=X(best_X,:);
        end
    else
        if best>Fbest  %maximization
            Fbest=best;Lbest=X(best_X,:);
        end
    end
    
    BestChart=[BestChart Fbest];
    MeanChart=[MeanChart mean(fitness)];
    %Calculation of M. eq.14-20
    [M]=massCalculation(fitness,min_flag);
    if M == 1
        break
    end
    %Calculation of Gravitational constant. eq.13.
    G=Gconstant(iter,Max_iter);
    
    %Calculation of accelaration in gravitational field. eq.7-10,21.

    a=Gfield(M,X,G,Rnorm,Rpower,ElitistCheck,iter,Max_iter);
    
    %Agent movement. eq.11-12
    [X,V]=move(X,a,V);
    % Store the Best Cost Value
    BestCosts(iter) = Fbest;
    if mod(iter,100)==0
        display(['At iteration ', num2str(iter), ' the best solution fitness is ', num2str(Fbest)]);
    end
end %iteration
GlobalBest_Cost = Fbest;
GlobalBest_Position = Lbest;
% Store
Store(iter).GlobalBest_Position = GlobalBest_Position;
Store(iter).GlobalBest_Cost = GlobalBest_Cost;
end


